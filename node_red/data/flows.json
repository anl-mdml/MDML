[{"id":"e87fb0a3.9981f","type":"tab","label":"MDML","disabled":false,"info":"Manufacturing Data & Machine Learning Layer"},{"id":"cc05686e.38f588","type":"tab","label":"Tools","disabled":false,"info":"Tools for working with node-red and the data layer."},{"id":"75fc300d.85f66","type":"subflow","name":"Gauge Viz - FSP_DATA_LOG","info":"","category":"MDML Viz","in":[{"x":52.857147216797,"y":160.00001525879,"wires":[{"id":"9ea59e30.a29fe"}]}],"out":[],"env":[]},{"id":"dd694074.ffb19","type":"subflow","name":"OES Graph","info":"","category":"MDML Viz","in":[{"x":130,"y":200,"wires":[{"id":"f2bedc3d.766b7"}]}],"out":[],"env":[]},{"id":"37b3ecd6.8dd274","type":"subflow","name":"SMPS Graph","info":"","category":"MDML Viz","in":[{"x":130,"y":230,"wires":[{"id":"3cc1f7c9.b9a928"}]}],"out":[],"env":[]},{"id":"7ada9910.b93388","type":"subflow","name":"Gauge Viz - FSP_DATA_LOG (2)","info":"","category":"MDML Viz","in":[{"x":52.857147216797,"y":160.00001525879,"wires":[{"id":"3ca4b476.b3acbc"}]}],"out":[],"env":[]},{"id":"f1a527fa.da00d8","type":"subflow","name":"OES Graph (2)","info":"","category":"MDML Viz","in":[{"x":130,"y":200,"wires":[{"id":"3a11edb1.759972"}]}],"out":[],"env":[]},{"id":"7a5cfc38.81d124","type":"subflow","name":"SMPS Graph (2)","info":"","category":"MDML Viz","in":[{"x":130,"y":230,"wires":[{"id":"9deb096b.9c5098"}]}],"out":[],"env":[]},{"id":"8a3166c3.a1a678","type":"subflow","name":"DATA_LOG dashboard","info":"","category":"MDML Viz","in":[{"x":-20,"y":80,"wires":[{"id":"358d630b.6f71bc"}]}],"out":[],"env":[]},{"id":"ab3bf1e3.b303a","type":"subflow","name":"Archiving","info":"","category":"MDML","in":[{"x":80,"y":220,"wires":[{"id":"9d3e23da.182de"}]}],"out":[],"env":[]},{"id":"b444b0d7.19cc9","type":"subflow","name":"InfluxDB","info":"","category":"MDML","in":[{"x":160,"y":240,"wires":[{"id":"cfee3408.f0c768"}]}],"out":[],"env":[]},{"id":"70fe595b.4aa5c8","type":"subflow","name":"Writing to filesystem","info":"","category":"MDML","in":[{"x":160,"y":200,"wires":[{"id":"fa8868a0.4967c8"}]}],"out":[],"env":[]},{"id":"3665fcdd.57c5f4","type":"subflow","name":"Video Streaming","info":"","category":"MDML","in":[{"x":80,"y":520,"wires":[{"id":"1ff4562.37e26aa"},{"id":"c9776831.965f58"}]}],"out":[],"env":[]},{"id":"831f119b.483c2","type":"subflow","name":"Query data & Submit to Func-X","info":"","category":"","in":[{"x":56.82540321350098,"y":63.650827407836914,"wires":[{"id":"3343d8c1.fb7628"},{"id":"6ceaee66.481d3"}]}],"out":[],"env":[],"color":"#DDAA99"},{"id":"a98579fa.409578","type":"mqtt-broker","z":"","name":"Mosquitto Subscriber","broker":"mosquitto","port":"1883","clientid":"NodeRED_subscriber","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"2","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"df6e2d21.c3f38","type":"websocket-listener","z":"","path":"/PLIF","wholemsg":"false"},{"id":"8f932cd7.3efac","type":"mqtt-broker","z":"","name":"Publish errors","broker":"mosquitto","port":"1883","clientid":"NodeRED_publisher","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"18be395a.563767","type":"influxdb","z":"","hostname":"influxdb","port":"8086","protocol":"http","database":"merf","name":"MDML InfluxDB","usetls":false,"tls":""},{"id":"4245eb4d.833fe4","type":"ui_tab","z":0,"name":"Home","icon":"dashboard","disabled":false,"hidden":false},{"id":"8f729019.4d399","type":"ui_base","z":"","theme":{"name":"theme-dark","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"Tahoma,Geneva,sans-serif","edited":true,"reset":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#097479","value":"#097479","edited":false},"page-titlebar-backgroundColor":{"value":"#097479","edited":false},"page-backgroundColor":{"value":"#111111","edited":false},"page-sidebar-backgroundColor":{"value":"#000000","edited":false},"group-textColor":{"value":"#0eb8c0","edited":false},"group-borderColor":{"value":"#555555","edited":false},"group-backgroundColor":{"value":"#333333","edited":false},"widget-textColor":{"value":"#eeeeee","edited":false},"widget-backgroundColor":{"value":"#097479","edited":false},"widget-borderColor":{"value":"#333333","edited":false},"base-font":{"value":"Tahoma,Geneva,sans-serif"}},"angularTheme":{"primary":"indigo","accents":"blue","warn":"red","background":"grey"}},"site":{"name":"MERF Data Layer","hideToolbar":"false","allowSwipe":"false","lockMenu":"false","allowTempTheme":"true","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"9c3a11a4.875ad","type":"ui_tab","z":0,"name":"Flame Spray Pyrolysis","icon":"fa-fire","disabled":false,"hidden":false},{"id":"d0151986.eb0e58","type":"ui_group","z":0,"name":"Data Dashboard","tab":"9c3a11a4.875ad","disp":true,"width":"6","collapse":false},{"id":"13fa16c0.967759","type":"ui_group","z":0,"name":"OES Data","tab":"9c3a11a4.875ad","disp":true,"width":"12","collapse":false},{"id":"40002b32.273dd4","type":"ui_tab","z":0,"name":"Charts","icon":"dashboard","order":2},{"id":"e0fb7505.f0e1a8","type":"ui_group","z":0,"name":"SMPS Graph","tab":"9c3a11a4.875ad","disp":true,"width":"12","collapse":false},{"id":"b83e4706.5342f8","type":"ui_tab","z":0,"name":"Home","icon":"dashboard","disabled":false,"hidden":false},{"id":"4048c54a.ad683c","type":"ui_tab","z":0,"name":"Home","icon":"dashboard","disabled":false,"hidden":false},{"id":"c73f9870.34be08","type":"ui_tab","z":0,"name":"Flame Spray Pyrolysis","icon":"fa-fire","disabled":false,"hidden":false},{"id":"181a68e0.460757","type":"ui_group","z":0,"name":"Data Dashboard","tab":"c73f9870.34be08","disp":true,"width":"6","collapse":false},{"id":"55147515.0ebfec","type":"ui_group","z":0,"name":"OES Data","tab":"c73f9870.34be08","disp":true,"width":"12","collapse":false},{"id":"e8bf680b.249b08","type":"ui_tab","z":0,"name":"Charts","icon":"dashboard","order":2},{"id":"3baaf286.55596e","type":"ui_group","z":0,"name":"SMPS Graph","tab":"c73f9870.34be08","disp":true,"width":"12","collapse":false},{"id":"563ce5d0.115a1c","type":"ui_tab","z":0,"name":"Home","icon":"dashboard","disabled":false,"hidden":false},{"id":"ed377597.38bed8","type":"mqtt in","z":"e87fb0a3.9981f","name":"MDML/#","topic":"MDML/#","qos":"2","datatype":"auto","broker":"a98579fa.409578","x":120,"y":220,"wires":[["9a88ea43.6bc658"]]},{"id":"9a88ea43.6bc658","type":"function","z":"e87fb0a3.9981f","name":"Parse message topic","func":"// console.log(msg)\ntry {\n    // Deconstruct message\n    var topic_parts = msg.topic.split('/');\n    \n    // Separate parts of the message topic\n    msg.building = topic_parts[0];\n    msg.experiment = topic_parts[1];\n    msg.action = topic_parts[2];\n    // DATA messages have 4 parts to a topic\n    if (topic_parts.length === 4) {\n        msg.sensor = topic_parts[3];\n    }\n    \n    // Get all valid experiment tags\n    var valid_experiments = global.get('experiments');\n    // Check for valid experiment tag\n    if (Object.keys(valid_experiments).indexOf(msg.experiment) < 0) {\n        throw \"Experiment ID not valid. Contact manufacturing@anl.gov \" +\n        \"to receive an Experiment ID that will allow you to access MDML features.\" \n        return;\n    }\n    \n    // Check for a valid action\n    var valid_actions = [\"CONFIG\", \"DATA\", \"FUNCX\", \"RESET\"];\n    if (valid_actions.indexOf(msg.action) < 0) {\n        throw 'Invalid action in topic. Action must be \"CONFIG\", \"DATA\", \"FUNCX\", or \"RESET\".' \n    }\n    \n    // Pass message on if it is a config message\n    if (msg.action === \"CONFIG\") {\n        return msg;\n    } else if (global.keys().indexOf(msg.experiment) >= 0) {\n    // Checking for experiment configuration\n        if (msg.action == \"DATA\") {\n            valid_devices = global.get(msg.experiment).experiment.experiment_devices\n            // Check the device is valid for this experiment\n            if (valid_devices.indexOf(msg.sensor) < 0) {\n                throw \"Invalid device ID. This device is not listed in your configuration.\"\n            } else {\n                // Pass the message on\n                return msg;\n            }\n        } else if (msg.action == \"RESET\" | msg.action == \"FUNCX\") {\n            // Pass the message on\n            return msg;\n        }\n    }\n    \n    // Return null if msg was not returned yet\n    throw \"No configuration found. You must create one before using any other actions.\"\n} catch (err) {\n    console.log(msg.experiment + ': ' + err)\n    return {\n        'payload': err,\n        'action': 'ERROR',\n        'topic': 'MDML_DEBUG/' + msg.experiment\n    }\n}","outputs":1,"noerr":0,"x":320,"y":220,"wires":[["90e5d620.bb4b38"]]},{"id":"2a57aebc.a5bd72","type":"function","z":"e87fb0a3.9981f","name":"Resetting files and indices","func":"// Get experiment config\nvar config = global.get(msg.experiment);\n\n// Getting all device names\nvar devices = config.experiment.experiment_devices\n\n// Message to split and forward to resets\nvar reset_msg = {\n    'experiment': msg.experiment,\n    'topic': 'MDML/TEST/RESET',\n    'payload': devices,\n    'config': config,\n    'action': 'RESET'\n}\n\n// Removing configuration\nglobal.set(msg.experiment, undefined)\n\n// Remove flow indices\nfor (var dev in devices) {\n    global.set(msg.experiment + '_' + devices[dev] + \"_index\", undefined);\n}\n\n// Building notification for publishing\nvar reset_debug_msg = {\n    'payload': \"Experiment reset initiated.\",\n    'topic': 'MDML_DEBUG/' + msg.experiment\n}\n\nreturn [\n    reset_msg,\n    reset_debug_msg\n];","outputs":2,"noerr":0,"x":871.4285430908203,"y":354.28570890426636,"wires":[["a81d850a.600df8","d8112057.b7b8b"],["420b503a.af3dc"]]},{"id":"358d630b.6f71bc","type":"subflow:75fc300d.85f66","z":"8a3166c3.a1a678","name":"DATA_LOG Dashboard Gauges","env":[],"x":250,"y":80,"wires":[]},{"id":"9ea59e30.a29fe","type":"split","z":"75fc300d.85f66","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"key","x":185,"y":184,"wires":[["169bb366.5ad51d"]]},{"id":"169bb366.5ad51d","type":"function","z":"75fc300d.85f66","name":"Rounding numbers","func":"msg.payload = Math.round(msg.payload * 100)/100\nreturn msg;","outputs":1,"noerr":0,"x":461,"y":276,"wires":[["33cd0ff0.07d44"]]},{"id":"bb5d9667.0ca0b8","type":"ui_gauge","z":"75fc300d.85f66","name":"","group":"d0151986.eb0e58","order":1,"width":"2","height":"2","gtype":"gage","title":"T-01","label":"units","format":"{{value}}","min":0,"max":"200","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1120,"y":114,"wires":[]},{"id":"457035d2.271bfc","type":"ui_gauge","z":"75fc300d.85f66","name":"","group":"d0151986.eb0e58","order":1,"width":"2","height":"2","gtype":"gage","title":"T-02","label":"units","format":"{{value}}","min":0,"max":"150","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1010,"y":246,"wires":[]},{"id":"633bcf3a.c8eb4","type":"ui_gauge","z":"75fc300d.85f66","name":"","group":"d0151986.eb0e58","order":2,"width":"2","height":"2","gtype":"gage","title":"T-03","label":"units","format":"{{value}}","min":0,"max":"300","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1010,"y":286,"wires":[]},{"id":"3b02f03b.5730e","type":"ui_gauge","z":"75fc300d.85f66","name":"","group":"d0151986.eb0e58","order":3,"width":"2","height":"2","gtype":"gage","title":"Exhaust Flow","label":"units","format":"{{value}}","min":0,"max":"3000","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1035.1430664062,"y":504.85723876953,"wires":[]},{"id":"bf6143ce.f1407","type":"ui_gauge","z":"75fc300d.85f66","name":"","group":"d0151986.eb0e58","order":1,"width":"2","height":"2","gtype":"gage","title":"Liquid Flow","label":"units","format":"{{value}}","min":0,"max":"20","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1028,"y":356,"wires":[]},{"id":"9598aa24.611ee8","type":"ui_gauge","z":"75fc300d.85f66","name":"","group":"d0151986.eb0e58","order":2,"width":"2","height":"2","gtype":"gage","title":"SOL#","label":"","format":"{{value}}","min":0,"max":"200","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1012,"y":322,"wires":[]},{"id":"c3bccfd2.c6a9f","type":"ui_gauge","z":"75fc300d.85f66","name":"","group":"d0151986.eb0e58","order":3,"width":"2","height":"2","gtype":"gage","title":"Vol Remaining","label":"mL","format":"{{value}}","min":0,"max":10,"colors":["#ca3838","#e6e600","#00b500"],"seg1":"","seg2":"","x":1038,"y":394,"wires":[]},{"id":"e3978b6b.83f3e8","type":"ui_gauge","z":"75fc300d.85f66","name":"","group":"d0151986.eb0e58","order":4,"width":"2","height":"2","gtype":"gage","title":"Fan Load","label":"units","format":"{{value}}","min":0,"max":"100","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1018,"y":430.28570556641,"wires":[]},{"id":"27c73610.b0fdfa","type":"ui_gauge","z":"75fc300d.85f66","name":"","group":"d0151986.eb0e58","order":5,"width":"2","height":"2","gtype":"gage","title":"Pressure","label":"units","format":"{{value}}","min":"-10","max":10,"colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1015.7143554688,"y":466,"wires":[]},{"id":"33cd0ff0.07d44","type":"switch","z":"75fc300d.85f66","name":"","property":"key","propertyType":"msg","rules":[{"t":"eq","v":"T-01","vt":"str"},{"t":"eq","v":"T-02","vt":"str"},{"t":"eq","v":"T-03","vt":"str"},{"t":"eq","v":"SOL#","vt":"str"},{"t":"eq","v":"Liquid Flow","vt":"str"},{"t":"eq","v":"Vol remaining [ml]","vt":"str"},{"t":"eq","v":"Fan Load","vt":"str"},{"t":"eq","v":"Pressure","vt":"str"},{"t":"eq","v":"Exhaust Flow","vt":"str"}],"checkall":"false","repair":false,"outputs":9,"x":661,"y":352,"wires":[["6857a2f9.73231c"],["457035d2.271bfc"],["633bcf3a.c8eb4"],["9598aa24.611ee8"],["bf6143ce.f1407"],["c3bccfd2.c6a9f"],["e3978b6b.83f3e8"],["27c73610.b0fdfa"],["3b02f03b.5730e"]]},{"id":"27f71a68.d25bf6","type":"ui_toast","z":"75fc300d.85f66","position":"bottom right","displayTime":"3","highlight":"grey","outputs":0,"ok":"OK","cancel":"","topic":"","name":"Temp Notification","x":1402,"y":176,"wires":[]},{"id":"6857a2f9.73231c","type":"function","z":"75fc300d.85f66","name":"Temp checker","func":"if (msg.payload > 150) {\n    notification = {};\n    notification.payload = \"Warning temperatures over 150 degrees Celcius!\";\n    notification.topic = \"T-01\"\n    return [\n        msg,\n        notification\n    ];\n} else {\n    return [\n        msg\n    ];\n}","outputs":2,"noerr":0,"x":845,"y":170,"wires":[["bb5d9667.0ca0b8"],["10f06abf.90fb65"]]},{"id":"10f06abf.90fb65","type":"trigger","z":"75fc300d.85f66","op1":"","op2":"","op1type":"pay","op2type":"nul","duration":"10","extend":false,"units":"s","reset":"","bytopic":"all","name":"","x":1043,"y":180,"wires":[[]]},{"id":"ab9af5a6.ce6868","type":"function","z":"e87fb0a3.9981f","name":"Parse message payload","func":"// Turning string payload into object\ntry {\n    msg.payload = JSON.parse(msg.payload)\n} catch(err) { // TODO this should error back to user\n    console.log(err)\n    return;\n}\n// Image data\nif (msg.payload.data_type !== undefined) {\n    if (msg.payload.data_type === 'image') {\n        msg.data_type = 'image';\n        msg.timestamp = msg.payload.timestamp;\n        return msg;\n    }\n}\n// Data delimiter\nif (msg.payload.data_delimiter !== undefined) {\n    msg.data_delimiter = msg.payload.data_delimiter;\n}\n\n// InfluxDB measurement\nif (msg.payload.influx_measurement !== undefined) {\n    msg.influx_measurement = msg.payload.influx_measurement;\n}\n\n// Data type\nif (msg.payload.data_type !== undefined) {\n    msg.data_type = msg.payload.data_type;\n} else {\n    msg.data_type = \"text/numeric\" // default\n}\n\n// Timestamp\nif (msg.payload.timestamp !== undefined) {\n    msg.timestamp = msg.payload.timestamp;\n}\n\n// Debugging index\nif (msg.payload.debug_index !== undefined) {\n    msg.debug_index = msg.payload.debug_index;\n}\n\n// Must be done last, overwrites msg.payload\nmsg.payload = msg.payload.data;\n\n// console.log(msg.debug_index)\nreturn msg;","outputs":1,"noerr":0,"x":870,"y":220,"wires":[["20729190.2a001e"]]},{"id":"672f89b9.2366e8","type":"function","z":"e87fb0a3.9981f","name":"Parsing data","func":"// Helper functions for melt \n// put here since the package was not loading in properly\n// https://github.com/jrideout/melt.js/blob/master/melt.js\nfunction set(keys) {\n    var s = {}, keys = keys || [];\n    for (var i = 0; i < keys.length; i++) {\n        s[keys[i]] = 1;\n    }\n    return s;\n}\n\nfunction extend(obj, copy) {\n    for (var k in copy) {\n        obj[k] = copy[k];\n    }\n    return obj;\n}\n\nfunction melt(data, keep, varName, valName, noAddId=true) {\n    var newData = [],\n        varName = varName || 'variable',\n        valName = valName || 'value',\n        keepSet = set(keep);\n    \n    data.forEach(function (row, rowId) {\n        var save = noAddId ? {} : {_id: rowId},\n            vars = [],\n            vals = [];\n        for (var k in row) {\n            if (keepSet[k]) {\n                save[k] = row[k];\n            } else {\n                vars.push(k);\n                vals.push(row[k]);\n            }\n        }\n        for (var i = 0; i < vars.length; i++) {\n            var newRow = {};\n            newRow[varName] = vars[i];\n            newRow[valName] = vals[i];\n            newData.push(extend(newRow, save));\n        }\n    });\n    return newData;\n}\n// ^^^ https://github.com/jrideout/melt.js/blob/master/melt.js  ^^^\n\n// Getting experiment configurations\nvar config = global.get(msg.experiment)\n\n// Get device config\nvar device = config.devices.filter(function(d) {\n    return d.device_id === msg.sensor;\n})[0];\n\n// Experiment number\nvar exp_num = config.experiment.experiment_run_id;\n\n// Get data headers from device config\nvar data_headers = device.headers\n\n// Retreiving the actual data\nvar data = msg.payload;\n\n// Splitting data if needed\nif (msg.data_delimiter !== undefined) {\n    var data_split = data.split(msg.data_delimiter);\n} else {\n    var data_split = [data];\n}\n\n// Drop message if data length !== headers length\nif (data_split.length !== data_headers.length) {\n    console.error(\"Number of data points does not equal the number of headers for this sensor. Is your delimiter correct?\")\n    console.error(\"Data points: \" + data_split.length)\n    console.error(\"Data headers: \" + data_headers.length)\n    return;\n}\n\n// Creating object for the data\nvar data_named = {}\n\n// Iterate data while inserting to object\ndata_split.forEach(function(val, i) {\n    if (val.match(/^-?[,.\\d]+(e[+-]\\d)?$/) !== null) {\n        data_named[data_headers[i]] = parseFloat(val)\n    } else if (val == '') {\n        data_named[data_headers[i]] = 0\n    } else {\n        data_named[data_headers[i]] = val\n    }\n})\n\n// Melting the data\nvar melt_params\nif (device.melt_data !== undefined) {\n    melt_params = device.melt_data\n    var melted_data = melt([data_named], \n                            melt_params.keep, \n                            melt_params.var_name, \n                            melt_params.var_val)\n}\n\n// Prepping data for InfluxDB\nvar influx_data;\nvar user_tags;\nif (device.melt_data !== undefined) {\n    if (device.influx_tags !== undefined) {\n        influx_data = []\n        user_tags = device.influx_tags\n        melted_data.forEach(function(named_data) {\n            tmp_data = [{}, {}]\n            Object.keys(named_data).forEach(function(d) {\n                if (user_tags.indexOf(d) < 0) {\n                    tmp_data[0][d] = named_data[d]\n                } else {\n                    tmp_data[1][d] = named_data[d]\n                }\n            })\n            influx_data.push(tmp_data)\n        })\n    } else {\n        console.log(melted_data)\n        influx_data = melted_data.forEach(d => [d]) \n        console.log(\"MELT AND NO TAG\")\n        console.log(influx_data)\n    }\n} else {\n    if (device.influx_tags !== undefined) {\n        // Splitting data into fields and tags which are InfluxDB constructs\n        //      Only tags can be used in a 'WHERE' query statement\n        influx_data = [{}, {}]\n        // Get data from user on which fields are tags\n        user_tags = device.influx_tags\n        Object.keys(data_named).forEach(function(d) {\n            if (user_tags.indexOf(d) < 0) {\n                influx_data[0][d] = data_named[d]\n            } else {\n                influx_data[1][d] = data_named[d]\n            }\n        })\n        console.log(\"NO MELT AND TAG\")\n    } else {\n        influx_data = data_named\n        console.log(\"NO MELT AND NO TAG\")\n    }\n}\n\n\nvar msg_out = {\n    'payload': influx_data,\n    'topic': msg.experiment + \"_\" + msg.sensor, // keep generic\n    'device_output_rate': parseInt(device.device_output_rate),\n    'type': 'DATA'\n};\n\n// Adding InfluxDB measurement value\nif (msg.influx_measurement !== undefined) {\n    msg_out.measurement = msg.experiment + '_' + msg.influx_measurement;\n}\n\n// Output\nSAVE_LOCATION = global.get(\"saved_data_dir\")\nfilename = SAVE_LOCATION + \n    msg.experiment + \"/\" + \n    msg.experiment + \"_\" + exp_num + \"/\" +\n    msg.sensor;\n    \n// Check if file exists (if it does do not send headers)\nvar fs = global.get('fs');\nvar send_headers = true;\ntry {\n    if (fs.existsSync(filename)) {\n        //file exists\n        send_headers = false;\n    }\n} catch(err) {}\n\n// Return 3 things: \n//      Data for InfluxDB storage\n//      Data for file writing\n//      Data headers for file writing\nif (send_headers) {\n    return [\n        msg_out,\n        {\n            'payload': data_split,\n            'topic': msg.experiment + \"_\" + exp_num + \"_\" + msg.sensor, \n            'filename': filename,\n            'type': 'data'\n        },\n        { \n            'payload': data_headers,\n            'topic': msg.experiment + \"_\" + exp_num + \"_\" + msg.sensor, \n            'filename': filename,\n            'type': 'headers'\n        }\n    ];\n} else {\n    return [\n        msg_out,\n        {\n            'payload': data_split,\n            'topic': msg.experiment + \"_\" + exp_num + \"_\" + msg.sensor, \n            'filename': filename,\n            'type': 'data'\n        }\n    ];\n}","outputs":3,"noerr":0,"x":1464.9998931884766,"y":153.33333015441895,"wires":[["8b25b68f.9633e8","d002709c.5bc06"],["1ae53a2c.12a4e6"],["1ae53a2c.12a4e6"]]},{"id":"8b25b68f.9633e8","type":"switch","z":"e87fb0a3.9981f","name":"Graphing router","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"FSP_DATA_LOG","vt":"str"},{"t":"eq","v":"FSP_OES","vt":"str"},{"t":"eq","v":"FSP_SMPS","vt":"str"}],"checkall":"true","repair":false,"outputs":3,"x":1809.333381652832,"y":95.99999809265137,"wires":[["e13b48d4.934838"],["d86bd21.cde093"],[]]},{"id":"f2bedc3d.766b7","type":"function","z":"dd694074.ffb19","name":"Formatting data","func":"var channel_id = msg.payload.Channel;\nvar data_headers = Object.keys(msg.payload);\nvar data_split = Object.values(msg.payload);\n\nreturn [\n    {'payload': {\n        'channel': channel_id, \n        'wavelengths': data_headers.slice(5), \n        'intensities': data_split.slice(5)\n    }}\n];","outputs":1,"noerr":0,"x":300,"y":200,"wires":[["48d75370.3cd10c"]]},{"id":"dab24e9.533a2b","type":"ui_chart","z":"dd694074.ffb19","name":"OES graph","group":"13fa16c0.967759","order":1,"width":0,"height":0,"label":"","chartType":"line","legend":"false","xformat":"auto","interpolate":"linear","nodata":"Waiting on data...","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":1,"x":960,"y":200,"wires":[[]]},{"id":"48d75370.3cd10c","type":"join","z":"dd694074.ffb19","name":"Join OES data","mode":"custom","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"8","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"num","reduceFixup":"","x":530,"y":200,"wires":[["d53c1320.ab5"]]},{"id":"d53c1320.ab5","type":"function","z":"dd694074.ffb19","name":"Format data","func":"msgs = msg.payload;\nlabels = msgs[0].wavelengths;\nseries = msgs.map(function(d) {\n    return d.channel;\n});\ndata = msgs.map(function(d) {\n    return d.intensities;\n});\n\nreturn { \n    payload: [{\n        'series': series,\n        'data': data,\n        'labels': labels\n    }]\n};","outputs":1,"noerr":0,"x":750,"y":200,"wires":[["dab24e9.533a2b"]]},{"id":"d86bd21.cde093","type":"subflow:dd694074.ffb19","z":"e87fb0a3.9981f","name":"OES Dashboard Graph","env":[],"x":2099.333381652832,"y":75.99999809265137,"wires":[],"info":"Subflow that takes the standard parsed message output and produces a line graph.\n"},{"id":"3cc1f7c9.b9a928","type":"function","z":"37b3ecd6.8dd274","name":"Formatting data","func":"var chart_data = {};\nObject.keys(msg.payload).forEach(function(d) {\n    if (d.match(/^-?[,.\\d]+(e[+-]\\d)?$/) !== null) {\n        if (msg.payload[d] === \"\") {\n            chart_data[d] = 0;   \n        } else {\n            chart_data[d] = msg.payload[d];\n        }\n    }\n});\n\nvar labels = Object.keys(chart_data);\nlabels = labels.map(function(d) {\n    return parseFloat(d);\n});\n\n//TODO need to maintain order of the data\n\n// return { \n//     payload: [{\n//         'series': series,\n//         'data': data,\n//         'labels': labels\n//     }]\n// };\n\n// console.log(msg)\n// console.log(chart_data)\nreturn {\n    'payload': [{\n        'series': [\"SMPS Data\"],\n        'data': [Object.values(chart_data)],\n        'labels': labels\n    }]\n};","outputs":1,"noerr":0,"x":300,"y":230,"wires":[["e5c5fba9.1f8dd8"]]},{"id":"e5c5fba9.1f8dd8","type":"ui_chart","z":"37b3ecd6.8dd274","name":"SMPS graph","group":"e0fb7505.f0e1a8","order":1,"width":0,"height":0,"label":"","chartType":"line","legend":"false","xformat":"auto","interpolate":"linear","nodata":"Waiting on data...","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":1,"x":520,"y":230,"wires":[[]]},{"id":"65067578.9f24cc","type":"subflow:37b3ecd6.8dd274","z":"e87fb0a3.9981f","name":"SMPS Dashboard Graph","env":[],"x":2096.8334045410156,"y":118.50000190734863,"wires":[]},{"id":"77320d06.2c7704","type":"function","z":"e87fb0a3.9981f","name":"Setting global config","func":"try {\n    // String to object\n    msg.payload = JSON.parse(msg.payload);\n    \n    // Temp storing config (for readability)\n    config = msg.payload\n    \n    // If configuration present error out\n    if (global.get(msg.experiment) !== undefined) {\n        return {\n            'payload': 'There is already a configuration present for your experiment.' +\n                'You must first end the old experiment before starting a new one.',\n            'topic': 'MDML_DEBUG/' + msg.experiment\n        }\n    }\n    \n    var config_validation = function(config) {\n        // Validating the 'experiment' section of the configuration\n        if (Object.keys(config).indexOf('experiment') < 0) {\n            throw \"Config section 'experiment' not found.\";\n        } else {\n            // Checking experiment section of the config\n            if (msg.experiment !== config.experiment.experiment_id) {\n                throw \"Experiment ID in the configuration does not match experiment ID in the message topic.\"\n            }\n            var exp_keys = Object.keys(config.experiment)\n            var valid_exp_keys = \n                exp_keys.indexOf('experiment_id') >= 0 &&\n                // exp_keys.indexOf('experiment_run_id') >= 0 &&\n                exp_keys.indexOf('experiment_notes') >= 0 &&\n                exp_keys.indexOf('experiment_devices') >= 0\n            if (!valid_exp_keys) {\n                throw \"Missing required experiment configuration values.\";\n            }\n        }\n\n        // Validating the 'devices' section of the configuration\n        if (Object.keys(config).indexOf('devices') < 0) {\n            throw \"Config section 'devices' not found.\";\n        } else {\n            if (config.devices.length === 0) {\n                throw \"No devices listed in the configuration.\"\n            }\n            for (var d in config.devices) {\n                var device = config.devices[d]\n                var dev_keys = Object.keys(device)\n                var valid_dev_keys =\n                    dev_keys.indexOf('device_id') >= 0 &&\n                    dev_keys.indexOf('device_name') >= 0 &&\n                    dev_keys.indexOf('device_output') >= 0 &&\n                    dev_keys.indexOf('device_output_rate') >= 0 &&\n                    dev_keys.indexOf('device_data_type') >= 0 &&\n                    dev_keys.indexOf('device_notes') >= 0 &&\n                    dev_keys.indexOf('headers') >= 0 &&\n                    dev_keys.indexOf('data_types') >= 0 &&\n                    dev_keys.indexOf('data_units') >= 0\n                if (!valid_dev_keys) {\n                    throw \"Missing required device configuration values in position \" + (d+1) + \".\";\n                }\n                // Check devices match\n                if (config.experiment.experiment_devices.indexOf(device.device_id) < 0) {\n                    throw 'Device listed in \"experiment_devices\" does not exist in \"devices\".';\n                }\n                // Check length of arrays are equal\n                if (device.headers.length !== device.data_types.length || device.headers.length !== device.data_units.length) { \n                    throw 'Inconsistent data descriptions in headers, data_types, or data_units. Number of entries in each field should be equal.';\n                }\n            }\n        }\n        return \"\";\n    }\n    \n    // Valid config (this also happens client-side via the MDML python package)\n    config_validation(config)\n  \n    // If experiment number is present in the configuration this is either a replay of an old experiment or a continuation.\n    if (config.experiment.experiment_run_id === undefined) {\n        // Get experiment number, increment, and save\n        experiments = global.get('experiments')\n        experiments[msg.experiment] += 1\n        global.set('experiments', experiments)\n        // Update config\n        config['experiment']['experiment_run_id'] = experiments[msg.experiment]\n    }\n\n    // Currently, new configs will erase all past configs\n    console.log(\"setting config globally\")\n    global.set(msg.experiment, config)\n    \n    return {\n        'payload': 'Configuration loaded successfully! Experiment run ID: ' + config.experiment.experiment_run_id,\n        'topic': 'MDML_DEBUG/' + msg.experiment\n    };\n} catch (err) {\n    console.log(err)\n    return {\n        'payload': err,\n        'topic': 'MDML_DEBUG/' + msg.experiment\n    }\n}","outputs":1,"noerr":0,"x":860,"y":140,"wires":[["420b503a.af3dc"]]},{"id":"20729190.2a001e","type":"switch","z":"e87fb0a3.9981f","name":"Data Type Router","property":"data_type","propertyType":"msg","rules":[{"t":"eq","v":"image","vt":"str"},{"t":"eq","v":"text/numeric","vt":"str"},{"t":"eq","v":"vector","vt":"str"}],"checkall":"true","repair":false,"outputs":3,"x":1190,"y":160,"wires":[["d1e4ad50.4cbf1"],["672f89b9.2366e8"],["4414779f.86e788"]]},{"id":"617f006d.1def9","type":"comment","z":"e87fb0a3.9981f","name":"Dashboard creation","info":"","x":1819.333381652832,"y":55.99999809265137,"wires":[]},{"id":"4669400f.8379a","type":"http in","z":"cc05686e.38f588","name":"","url":"/active","method":"get","upload":false,"swaggerDoc":"","x":242.8571472168,"y":261.42855834961,"wires":[["4b085349.26aa1c"]]},{"id":"4b5b4992.2abbe8","type":"change","z":"cc05686e.38f588","name":"Set Headers","rules":[{"t":"set","p":"headers","pt":"msg","to":"{}","tot":"json"},{"t":"set","p":"headers.content-type","pt":"msg","to":"text/json","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":655.9998779296875,"y":259.9999694824219,"wires":[["a46bb455.cf8738"]]},{"id":"a46bb455.cf8738","type":"http response","z":"cc05686e.38f588","name":"","statusCode":"","headers":{},"x":834,"y":261,"wires":[]},{"id":"4b085349.26aa1c","type":"function","z":"cc05686e.38f588","name":"Input filename","func":"// Get global variables\nvar global_vars = global.keys()\n// Filtering - only experiment configs should remain\nglobal_vars = global_vars.filter(d => d != \"experiments\")\n\n// Custom message if no experiments are running\nif (global_vars.length === 0) {\n    msg.payload = \"No active experiments.\"\n} else {\n    msg.payload = \"ACTIVE EXPERIMENTS\\n\\n\"\n    msg.payload += \"Experiment ID - Experiment Run\\n\"\n    // For each active experiment\n    global_vars.forEach(function(d) {\n        let config = global.get(d)\n        let exp_id = d\n        let exp_run_id = config.experiment.experiment_run_id\n        msg.payload += exp_id + \" - \" + exp_run_id;\n    });\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":453.1428222656274,"y":260.5714416503919,"wires":[["4b5b4992.2abbe8"]]},{"id":"a81d850a.600df8","type":"split","z":"e87fb0a3.9981f","name":"Reset each experimental device","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":1211.4285430908203,"y":454.28570890426636,"wires":[["ae411ac0.ec1ac8"]]},{"id":"ae411ac0.ec1ac8","type":"function","z":"e87fb0a3.9981f","name":"Add reset params","func":"// Add device to topic string\nmsg.topic = msg.experiment + \"_\" + msg.payload\nmsg.reset = true\nmsg.payload = undefined\nmsg.type = \"RESET\"\nreturn msg;","outputs":1,"noerr":0,"x":1451.4285430908203,"y":454.28570890426636,"wires":[["d002709c.5bc06","1ae53a2c.12a4e6"]],"info":"Links going to the 'Low Data Rates' and 'High \nData Rates' nodes are used to flush the node \nbuffers. The link going to the 'trigger & block'\nnode resets the node that is responsible for\nwriting the data headers to the file."},{"id":"3ca4b476.b3acbc","type":"split","z":"7ada9910.b93388","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"key","x":185,"y":184,"wires":[["8091c625.67b208"]]},{"id":"8091c625.67b208","type":"function","z":"7ada9910.b93388","name":"Rounding numbers","func":"msg.payload = Math.round(msg.payload * 100)/100\nreturn msg;","outputs":1,"noerr":0,"x":461,"y":276,"wires":[["5e16670f.15ed58"]]},{"id":"35960714.10c0e8","type":"ui_gauge","z":"7ada9910.b93388","name":"","group":"181a68e0.460757","order":1,"width":"2","height":"2","gtype":"gage","title":"T-01","label":"units","format":"{{value}}","min":0,"max":"200","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1120,"y":114,"wires":[]},{"id":"7223bf8e.d624a","type":"ui_gauge","z":"7ada9910.b93388","name":"","group":"181a68e0.460757","order":1,"width":"2","height":"2","gtype":"gage","title":"T-02","label":"units","format":"{{value}}","min":0,"max":"150","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1010,"y":246,"wires":[]},{"id":"dc4e3538.1b0e98","type":"ui_gauge","z":"7ada9910.b93388","name":"","group":"181a68e0.460757","order":2,"width":"2","height":"2","gtype":"gage","title":"T-03","label":"units","format":"{{value}}","min":0,"max":"300","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1010,"y":286,"wires":[]},{"id":"4823f56.db4390c","type":"ui_gauge","z":"7ada9910.b93388","name":"","group":"181a68e0.460757","order":3,"width":"2","height":"2","gtype":"gage","title":"Exhaust Flow","label":"units","format":"{{value}}","min":0,"max":"3000","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1035.1430664062,"y":504.85723876953,"wires":[]},{"id":"c8fe6c20.9b15d","type":"ui_gauge","z":"7ada9910.b93388","name":"","group":"181a68e0.460757","order":1,"width":"2","height":"2","gtype":"gage","title":"Liquid Flow","label":"units","format":"{{value}}","min":0,"max":"20","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1028,"y":356,"wires":[]},{"id":"e50a8e53.086bc","type":"ui_gauge","z":"7ada9910.b93388","name":"","group":"181a68e0.460757","order":2,"width":"2","height":"2","gtype":"gage","title":"SOL#","label":"","format":"{{value}}","min":0,"max":"200","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1012,"y":322,"wires":[]},{"id":"2127b81a.857198","type":"ui_gauge","z":"7ada9910.b93388","name":"","group":"181a68e0.460757","order":3,"width":"2","height":"2","gtype":"gage","title":"Vol Remaining","label":"mL","format":"{{value}}","min":0,"max":10,"colors":["#ca3838","#e6e600","#00b500"],"seg1":"","seg2":"","x":1038,"y":394,"wires":[]},{"id":"1bd401c0.d6d7ce","type":"ui_gauge","z":"7ada9910.b93388","name":"","group":"181a68e0.460757","order":4,"width":"2","height":"2","gtype":"gage","title":"Fan Load","label":"units","format":"{{value}}","min":0,"max":"100","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1018,"y":430.28570556641,"wires":[]},{"id":"c2f80bf0.546648","type":"ui_gauge","z":"7ada9910.b93388","name":"","group":"181a68e0.460757","order":5,"width":"2","height":"2","gtype":"gage","title":"Pressure","label":"units","format":"{{value}}","min":"-10","max":10,"colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1015.7143554688,"y":466,"wires":[]},{"id":"5e16670f.15ed58","type":"switch","z":"7ada9910.b93388","name":"","property":"key","propertyType":"msg","rules":[{"t":"eq","v":"T-01","vt":"str"},{"t":"eq","v":"T-02","vt":"str"},{"t":"eq","v":"T-03","vt":"str"},{"t":"eq","v":"SOL#","vt":"str"},{"t":"eq","v":"Liquid Flow","vt":"str"},{"t":"eq","v":"Vol remaining [ml]","vt":"str"},{"t":"eq","v":"Fan Load","vt":"str"},{"t":"eq","v":"Pressure","vt":"str"},{"t":"eq","v":"Exhaust Flow","vt":"str"}],"checkall":"false","repair":false,"outputs":9,"x":661,"y":352,"wires":[["37ba06e6.f00f5a"],["7223bf8e.d624a"],["dc4e3538.1b0e98"],["e50a8e53.086bc"],["c8fe6c20.9b15d"],["2127b81a.857198"],["1bd401c0.d6d7ce"],["c2f80bf0.546648"],["4823f56.db4390c"]]},{"id":"1abfa70d.884b79","type":"ui_toast","z":"7ada9910.b93388","position":"bottom right","displayTime":"3","highlight":"grey","outputs":0,"ok":"OK","cancel":"","topic":"","name":"Temp Notification","x":1402,"y":176,"wires":[]},{"id":"37ba06e6.f00f5a","type":"function","z":"7ada9910.b93388","name":"Temp checker","func":"if (msg.payload > 150) {\n    notification = {};\n    notification.payload = \"Warning temperatures over 150 degrees Celcius!\";\n    notification.topic = \"T-01\"\n    return [\n        msg,\n        notification\n    ];\n} else {\n    return [\n        msg\n    ];\n}","outputs":2,"noerr":0,"x":845,"y":170,"wires":[["35960714.10c0e8"],["d5fc4ff2.1df4d"]]},{"id":"d5fc4ff2.1df4d","type":"trigger","z":"7ada9910.b93388","op1":"","op2":"","op1type":"pay","op2type":"nul","duration":"10","extend":false,"units":"s","reset":"","bytopic":"all","name":"","x":1043,"y":180,"wires":[[]]},{"id":"3a11edb1.759972","type":"function","z":"f1a527fa.da00d8","name":"Formatting data","func":"var channel_id = msg.payload.Channel;\nvar data_headers = Object.keys(msg.payload);\nvar data_split = Object.values(msg.payload);\n\nreturn [\n    {'payload': {\n        'channel': channel_id, \n        'wavelengths': data_headers.slice(5), \n        'intensities': data_split.slice(5)\n    }}\n];","outputs":1,"noerr":0,"x":300,"y":200,"wires":[["5ee82871.8bd3c8"]]},{"id":"5c8cab67.667104","type":"ui_chart","z":"f1a527fa.da00d8","name":"OES graph","group":"55147515.0ebfec","order":1,"width":0,"height":0,"label":"","chartType":"line","legend":"false","xformat":"auto","interpolate":"linear","nodata":"Waiting on data...","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":1,"x":960,"y":200,"wires":[[]]},{"id":"5ee82871.8bd3c8","type":"join","z":"f1a527fa.da00d8","name":"Join OES data","mode":"custom","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"8","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"num","reduceFixup":"","x":530,"y":200,"wires":[["769e28ea.7eb788"]]},{"id":"769e28ea.7eb788","type":"function","z":"f1a527fa.da00d8","name":"Format data","func":"msgs = msg.payload;\nlabels = msgs[0].wavelengths;\nseries = msgs.map(function(d) {\n    return d.channel;\n});\ndata = msgs.map(function(d) {\n    return d.intensities;\n});\n\nreturn { \n    payload: [{\n        'series': series,\n        'data': data,\n        'labels': labels\n    }]\n};","outputs":1,"noerr":0,"x":750,"y":200,"wires":[["5c8cab67.667104"]]},{"id":"9deb096b.9c5098","type":"function","z":"7a5cfc38.81d124","name":"Formatting data","func":"var chart_data = {};\nObject.keys(msg.payload).forEach(function(d) {\n    if (d.match(/^-?[,.\\d]+(e[+-]\\d)?$/) !== null) {\n        if (msg.payload[d] === \"\") {\n            chart_data[d] = 0;   \n        } else {\n            chart_data[d] = msg.payload[d];\n        }\n    }\n});\n\nvar labels = Object.keys(chart_data);\nlabels = labels.map(function(d) {\n    return parseFloat(d);\n});\n\n//TODO need to maintain order of the data\n\n// return { \n//     payload: [{\n//         'series': series,\n//         'data': data,\n//         'labels': labels\n//     }]\n// };\n\n// console.log(msg)\n// console.log(chart_data)\nreturn {\n    'payload': [{\n        'series': [\"SMPS Data\"],\n        'data': [Object.values(chart_data)],\n        'labels': labels\n    }]\n};","outputs":1,"noerr":0,"x":300,"y":230,"wires":[["16ea45fc.27397a"]]},{"id":"16ea45fc.27397a","type":"ui_chart","z":"7a5cfc38.81d124","name":"SMPS graph","group":"3baaf286.55596e","order":1,"width":0,"height":0,"label":"","chartType":"line","legend":"false","xformat":"auto","interpolate":"linear","nodata":"Waiting on data...","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":1,"x":520,"y":230,"wires":[[]]},{"id":"e13b48d4.934838","type":"subflow:75fc300d.85f66","z":"e87fb0a3.9981f","name":"DATA_LOG Dashboard Gauges","env":[],"x":2109.333381652832,"y":35.99999809265137,"wires":[]},{"id":"e01fb02f.bd6df","type":"exec","z":"ab3bf1e3.b303a","command":"tar","addpay":true,"append":"","useSpawn":"false","timer":"","oldrc":false,"name":"Archiving files","x":600,"y":260,"wires":[["f9e7026f.a4d1d"],[],[]]},{"id":"91fb1d22.2dcfc","type":"delay","z":"ab3bf1e3.b303a","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":430,"y":260,"wires":[["e01fb02f.bd6df"]]},{"id":"9d3e23da.182de","type":"function","z":"ab3bf1e3.b303a","name":"Archiving files","func":"var exp = msg.config.experiment.experiment_id;\nvar exp_num = msg.config.experiment.experiment_run_id;\n\nvar tar_command = {\n    'payload': '-C ' + global.get('saved_data_dir') + \n    ' -zcvf ' + global.get('data_archive') + \n    exp + '_' + \n    exp_num + '.tar.gz ' +\n    exp + '/' + exp + '_' + exp_num\n}\n\nvar save_config_file = {\n    'filename': global.get('saved_data_dir') + exp + '/' + exp + '_' +\n        exp_num + '/config.json',\n    'payload': msg.config\n}\n\nreturn [save_config_file, tar_command];","outputs":2,"noerr":0,"x":220,"y":220,"wires":[["6c5bc0c1.d1953"],["91fb1d22.2dcfc"]]},{"id":"6c5bc0c1.d1953","type":"file","z":"ab3bf1e3.b303a","name":"Overwrite file","filename":"","appendNewline":false,"createDir":true,"overwriteFile":"true","encoding":"none","x":450,"y":180,"wires":[["f8dcc55a.23f268"]]},{"id":"d8112057.b7b8b","type":"subflow:ab3bf1e3.b303a","z":"e87fb0a3.9981f","name":"Archiving experiment files","env":[],"x":1214.4285430908203,"y":395.28570890426636,"wires":[]},{"id":"139f2b49.ceb9c5","type":"influxdb out","z":"b444b0d7.19cc9","influxdb":"18be395a.563767","name":"InfluxDB storage","measurement":"","precision":"","retentionPolicy":"","x":1670,"y":80,"wires":[]},{"id":"cfee3408.f0c768","type":"function","z":"b444b0d7.19cc9","name":"Using InfluxDB?","func":"if (msg.measurement !== undefined || msg.action === \"RESET\") {\n    return msg;\n}","outputs":1,"noerr":0,"x":304,"y":240,"wires":[["75549f8f.55825"]]},{"id":"6213b9.2663cc48","type":"function","z":"b444b0d7.19cc9","name":"Structuring for InfluxDB insert","func":"var payload = []\nmsg.payload.forEach(function(d){\n    payload.push([d]);\n});\nmsg.payload = payload;\nmsg.measurement = msg.topic\nreturn msg;","outputs":1,"noerr":0,"x":1410,"y":240,"wires":[["139f2b49.ceb9c5"]]},{"id":"725e792.4c29d88","type":"batcher","z":"b444b0d7.19cc9","name":"Low Data Rates","maxTopics":"300","maxMessagesPerTopic":"6000","maxDelay":"5000","x":1120,"y":220,"wires":[["6213b9.2663cc48"]]},{"id":"5972ecbd.10c374","type":"switch","z":"b444b0d7.19cc9","name":"Fast/Slow Producers","property":"device_output_rate","propertyType":"msg","rules":[{"t":"lt","v":"30","vt":"str"},{"t":"btwn","v":"30","vt":"num","v2":"100","v2t":"num"},{"t":"gt","v":"100","vt":"str"}],"checkall":"true","repair":false,"outputs":3,"x":840,"y":180,"wires":[["139f2b49.ceb9c5"],["725e792.4c29d88"],["eb43416a.3d87b"]]},{"id":"eb43416a.3d87b","type":"batcher","z":"b444b0d7.19cc9","name":"High Data Rates","maxTopics":"300","maxMessagesPerTopic":"50000","maxDelay":"5000","x":1130,"y":280,"wires":[["6213b9.2663cc48"]]},{"id":"75549f8f.55825","type":"switch","z":"b444b0d7.19cc9","name":"DATA or RESET message","property":"type","propertyType":"msg","rules":[{"t":"eq","v":"DATA","vt":"str"},{"t":"eq","v":"RESET","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":540,"y":240,"wires":[["5972ecbd.10c374"],["725e792.4c29d88","eb43416a.3d87b"]]},{"id":"d002709c.5bc06","type":"subflow:b444b0d7.19cc9","z":"e87fb0a3.9981f","name":"","env":[],"x":1760,"y":200,"wires":[]},{"id":"d7d91ae5.4775b8","type":"file","z":"70fe595b.4aa5c8","name":"Add data","filename":"","appendNewline":false,"createDir":true,"overwriteFile":"false","encoding":"none","x":1080,"y":240,"wires":[[]]},{"id":"5488e4a7.52911c","type":"batch","z":"70fe595b.4aa5c8","name":"","mode":"interval","count":10,"overlap":0,"interval":10,"allowEmptySequence":false,"topics":[],"x":750,"y":240,"wires":[["a42ac6e1.a4f398"]]},{"id":"c913f694.bb7ed8","type":"trigger","z":"70fe595b.4aa5c8","op1":"","op2":"0","op1type":"pay","op2type":"str","duration":"0","extend":false,"units":"ms","reset":"","bytopic":"topic","name":"","x":780,"y":190,"wires":[["1d9dd500.ef75bb"]]},{"id":"1d9dd500.ef75bb","type":"csv","z":"70fe595b.4aa5c8","name":"Obj to tsv","sep":"\\t","hdrin":"","hdrout":"","multi":"one","ret":"\\n","temp":"","skip":"0","strings":true,"x":940,"y":190,"wires":[["5f5255ce.6ae35c"]]},{"id":"a42ac6e1.a4f398","type":"csv","z":"70fe595b.4aa5c8","name":"Obj to tsv","sep":"\\t","hdrin":"","hdrout":"","multi":"one","ret":"\\n","temp":"","skip":"0","strings":true,"x":940,"y":240,"wires":[["d7d91ae5.4775b8"]]},{"id":"5f5255ce.6ae35c","type":"file","z":"70fe595b.4aa5c8","name":"Add data headers","filename":"","appendNewline":false,"createDir":true,"overwriteFile":"false","encoding":"none","x":1110,"y":190,"wires":[[]]},{"id":"f5fb901d.1101a","type":"comment","z":"70fe595b.4aa5c8","name":"File storage","info":"","x":770,"y":160,"wires":[]},{"id":"fa8868a0.4967c8","type":"switch","z":"70fe595b.4aa5c8","name":"","property":"type","propertyType":"msg","rules":[{"t":"eq","v":"headers","vt":"str"},{"t":"eq","v":"RESET","vt":"str"},{"t":"eq","v":"data","vt":"str"},{"t":"eq","v":"vector_data","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":460,"y":220,"wires":[["c913f694.bb7ed8"],[],["5488e4a7.52911c"],["4a9d8c4c.6fc974"]]},{"id":"1ae53a2c.12a4e6","type":"subflow:70fe595b.4aa5c8","z":"e87fb0a3.9981f","name":"","env":[],"x":1796.2500305175781,"y":320.0000057220459,"wires":[]},{"id":"f3b79627.c1b198","type":"http in","z":"3665fcdd.57c5f4","name":"[get] /FSP_PLIF","url":"/FSP_PLIF","method":"get","upload":false,"swaggerDoc":"","x":1106.2499771118164,"y":57.74999141693115,"wires":[["226f7d97.58da92"]]},{"id":"226f7d97.58da92","type":"multipart-encoder","z":"3665fcdd.57c5f4","name":"","statusCode":"","ignoreMessages":true,"outputOneNew":false,"outputIfSingle":false,"outputIfAll":false,"globalHeaders":{"Content-Type":"multipart/x-mixed-replace;boundary=--myboundary","Connection":"keep-alive","Expires":"Fri, 01 Jan 1990 00:00:00 GMT","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache"},"partHeaders":{"Content-Type":"image/jpeg"},"destination":"all","highWaterMark":16384,"x":1281.250015258789,"y":54.7499942779541,"wires":[[]]},{"id":"c9776831.965f58","type":"function","z":"3665fcdd.57c5f4","name":"Saving image to file and format metadata","func":"// Loading fs package\nvar fs = global.get('fs');\n\n// Getting experiment configurations\nvar config = global.get(msg.experiment)\n\n// Experiment number\nvar exp_num = config.experiment.experiment_run_id;\nmsg.exp_num = exp_num;\n// Image index key\nvar index_key = msg.experiment + '_' + msg.sensor + \"_index\";\n\n// Index number for filename\nvar index = global.get(index_key) || 1;\n\n// Create filepath - comments as an example\nvar filepath = global.get('saved_data_dir') + \n    msg.experiment + '/' +  // FSP\n    msg.experiment + '_' + exp_num + '/' +  // FSP_1\n    msg.sensor + '_images' // PLIF\nvar metadata_filepath = global.get('saved_data_dir') + \n    msg.experiment + '/' +  // FSP\n    msg.experiment + '_' + exp_num + '/' +  // FSP_1\n    msg.sensor // PLIF\n\n// Create dirs\nif (!fs.existsSync(filepath)) {\n    fs.mkdir(filepath, { recursive: true }, (err) => {\n      if (err) throw err;\n    });\n}\n\n// Create filename\nvar filename = msg.sensor + '_' + index + '.JPG'\n\n// Increment index\nglobal.set(index_key, index + 1)\n\n// Load base64\nvar base64 = global.get('base64');\n// String to bytes for saving the image\nimage_data = Buffer.from(msg.payload.data, 'base64')\n\n// Save the file\nfs.writeFile(\n    filepath + '/' + filename,\n    image_data,\n    function(err) { \n        if (err) { \n            return console.log(err) \n        }\n    }\n);\nmsg.filename = metadata_filepath;\nmsg.file = './' + msg.sensor + '_images/' + filename;\nmsg.timestamp = msg.payload.timestamp;\nreturn msg;","outputs":1,"noerr":0,"x":476.25000762939453,"y":588.7500066757202,"wires":[["bb3a8f90.36f13"]],"info":"Images are saved to files as they are received from the experiment. A flow-level variable is incremented each save to ensure unique file names."},{"id":"78148526.a1b5ec","type":"switch","z":"3665fcdd.57c5f4","name":"Experiment Stream Splitter","property":"index_key","propertyType":"msg","rules":[{"t":"eq","v":"FSP_PLIF","vt":"str"},{"t":"eq","v":"TEST_PLIF","vt":"str"},{"t":"eq","v":"TEST_IMAGE","vt":"str"}],"checkall":"true","repair":false,"outputs":3,"x":796.2500076293945,"y":448.7500066757202,"wires":[["226f7d97.58da92"],["3b1f307b.953f4"],["25d33612.55174a"]]},{"id":"1ff4562.37e26aa","type":"function","z":"3665fcdd.57c5f4","name":"Formating images for streaming","func":"// Setting index key to determine stream path\nmsg.index_key = msg.experiment + \"_\" + msg.sensor;\n// Load base64\nvar base64 = global.get('base64');\n// String to bytes for streaming the image\nmsg.payload = Buffer.from(msg.payload.data, 'base64')\nreturn msg;","outputs":1,"noerr":0,"x":456.25000762939453,"y":448.7500066757202,"wires":[["78148526.a1b5ec"]]},{"id":"d1e4ad50.4cbf1","type":"subflow:3665fcdd.57c5f4","z":"e87fb0a3.9981f","name":"","env":[],"x":1420,"y":80,"wires":[]},{"id":"8f1776be.8ad5e8","type":"comment","z":"3665fcdd.57c5f4","name":"Manual Changes Needed Here","info":"Add or remove statements in this switch for new\nexperiments. The format for the switch statement\nshould be \"[Experiment ID]_[Device ID]\".","x":786.2500076293945,"y":408.7500066757202,"wires":[]},{"id":"420b503a.af3dc","type":"mqtt out","z":"e87fb0a3.9981f","name":"Publish Events","topic":"","qos":"2","retain":"false","broker":"8f932cd7.3efac","x":1147.1429061889648,"y":571.4286108016968,"wires":[]},{"id":"f6cefe77.aeadd","type":"mqtt out","z":"ab3bf1e3.b303a","name":"Publish Events","topic":"","qos":"2","retain":"false","broker":"8f932cd7.3efac","x":1450.5000228881836,"y":223.75000286102295,"wires":[]},{"id":"912757c.a5f05a8","type":"function","z":"ab3bf1e3.b303a","name":"Put object MinIO and Format message to user","func":"// get minio API, its creds, and fs\nvar minio = global.get('minio');\nvar minio_creds = global.get('minio_creds');\nvar fs = global.get('fs');\nvar archive_dir = global.get('data_archive');\nvar host = global.get('host');\n\n// get experiment ID\nexp = msg.payload.split('/')[0];\nconsole.log(exp)\n\nif (msg.rc.code === 0) {\n    var filename = msg.payload.split('/')[1] + '.tar.gz';\n    var file = archive_dir + filename;\n    console.log(\"Archving msg:\")\n    console.log(msg)\n    // Storing tar file in MinIO bucket\n    // Create Minio client\n    mc = new minio.Client({\n        endPoint: host,\n        port: 9000,\n        useSSL: false,\n        accessKey: minio_creds.accesskey,\n        secretKey: minio_creds.secretkey,\n    });\n    metaData = {\n        'Content-Type': 'application/octet-stream'\n    }\n    console.log(exp)\n    console.log(filename)\n    console.log(file)\n    console.log(metaData)\n    mc.fPutObject('mdml-'+exp.toLowerCase(), filename, file, metaData, function(err, etag) {\n        if (err !== null) {\n            console.log(err)\n            return {\n                'topic': 'MDML_DEBUG/' + exp,\n                'payload': err\n            }\n        }\n    })\n\n    return {\n        'topic': 'MDML_DEBUG/' + exp,\n        'payload': 'Archived files for experiment with ID: ' + exp\n    };\n} else {\n    return {\n        'topic': 'MDML_DEBUG/' + exp,\n        'payload': 'Error archiving files for experiment with ID: ' + exp\n    };\n}\n","outputs":1,"noerr":0,"x":1078,"y":224,"wires":[["f6cefe77.aeadd"]]},{"id":"5cc0fd46.db5244","type":"comment","z":"ab3bf1e3.b303a","name":"Write configuration file","info":"","x":480,"y":140,"wires":[]},{"id":"f8dcc55a.23f268","type":"function","z":"ab3bf1e3.b303a","name":"Format message to user","func":"var exp = msg.payload.experiment.experiment_id;\nreturn {\n    'topic': 'MDML_DEBUG/' + exp,\n    'payload': exp + ' experiment configuration file saved for archiving.'\n};\n","outputs":1,"noerr":0,"x":800,"y":120,"wires":[["f6cefe77.aeadd"]]},{"id":"ea6edefe.edf94","type":"exec","z":"ab3bf1e3.b303a","command":"s3cmd","addpay":true,"append":"","useSpawn":"false","timer":"","oldrc":false,"name":"","x":1357.100112915039,"y":334.9500160217285,"wires":[["8cd5f2fd.b0b8f"],["4b77c48.6b42a3c"],["abd56000.56b1a"]]},{"id":"8cd5f2fd.b0b8f","type":"debug","z":"ab3bf1e3.b303a","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1546.1001014709473,"y":310.2500171661377,"wires":[]},{"id":"abd56000.56b1a","type":"debug","z":"ab3bf1e3.b303a","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1532.5000648498535,"y":393.2500171661377,"wires":[]},{"id":"4b77c48.6b42a3c","type":"debug","z":"ab3bf1e3.b303a","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1539.500072479248,"y":349.2500228881836,"wires":[]},{"id":"b6d05595.99dca8","type":"function","z":"ab3bf1e3.b303a","name":"Put object in BIS object store","func":"// get minio API, its creds, and fs\nvar s3 = global.get('s3client');\nvar archive_dir = global.get('data_archive')\n\n// get experiment ID\nexp = msg.payload.split('/')[0];\n\nif (msg.rc.code === 0) {\n\n    var filename = msg.payload.split('/')[1] + '.tar.gz';\n    console.log(\"Uploading \" + filename + \" to BIS S3.\")\n    var file = archive_dir + filename;\n\n    var cmd_append = \"put \" + file + \" s3://mdml-\" + exp.toLowerCase();\n\n    return {\n        'payload': cmd_append\n    };\n}\n","outputs":1,"noerr":0,"x":1018,"y":267,"wires":[["75fbc5b1.f8783c"]]},{"id":"7b623aef.087d94","type":"mqtt in","z":"e87fb0a3.9981f","name":"ADMIN_MDML/#","topic":"ADMIN_MDML/#","qos":"2","datatype":"auto","broker":"a98579fa.409578","x":191.25,"y":645,"wires":[["9ef31031.0276c"]]},{"id":"5f86934e.2152cc","type":"function","z":"e87fb0a3.9981f","name":"Add new experiment ID","func":"var new_ID = msg.payload.toUpperCase()\n\nvar experiments = global.get('experiments')\nexperiments[new_ID] = 0\nglobal.set('experiments', experiments)\n\nreturn msg;","outputs":1,"noerr":0,"x":861.0416564941406,"y":599.5833377838135,"wires":[[]]},{"id":"1250d35e.86345d","type":"switch","z":"e87fb0a3.9981f","name":"Action Router","property":"action","propertyType":"msg","rules":[{"t":"eq","v":"EXPERIMENT","vt":"str"},{"t":"eq","v":"RESET_EXP_RUN_ID","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":606.8750076293945,"y":641.2500095367432,"wires":[["5f86934e.2152cc"],["42b78c0b.d4ff64"]]},{"id":"9ef31031.0276c","type":"function","z":"e87fb0a3.9981f","name":"Parse message topic","func":"// Deconstruct message\nconsole.log(msg)\nvar topic_parts = msg.topic.split('/');\nconsole.log(topic_parts)\n// Separate parts of the message topic\nmsg.action = topic_parts[1];\n\nreturn msg;","outputs":1,"noerr":0,"x":395.625,"y":643.7500095367432,"wires":[["1250d35e.86345d"]]},{"id":"90e5d620.bb4b38","type":"switch","z":"e87fb0a3.9981f","name":"Action Router","property":"action","propertyType":"msg","rules":[{"t":"eq","v":"ERROR","vt":"str"},{"t":"eq","v":"CONFIG","vt":"str"},{"t":"eq","v":"DATA","vt":"str"},{"t":"eq","v":"FUNCX","vt":"str"},{"t":"eq","v":"RESET","vt":"str"}],"checkall":"true","repair":false,"outputs":5,"x":540,"y":220,"wires":[["420b503a.af3dc"],["77320d06.2c7704"],["ab9af5a6.ce6868"],["ffe81ed0.6f979"],["2a57aebc.a5bd72"]]},{"id":"bb3a8f90.36f13","type":"function","z":"3665fcdd.57c5f4","name":"Create metadata payload","func":"msg.payload = msg.timestamp + '\\t' + msg.file;\nreturn msg;","outputs":1,"noerr":0,"x":794.3750152587891,"y":602.5000085830688,"wires":[["8128f1b1.f555e","2a2f8cbb.9d4f44"]]},{"id":"2868df42.96087","type":"file","z":"3665fcdd.57c5f4","name":"Save timestamp and filename","filename":"","appendNewline":true,"createDir":false,"overwriteFile":"false","encoding":"none","x":1366.8750228881836,"y":588.7500095367432,"wires":[[]]},{"id":"fcafc652.308348","type":"comment","z":"e87fb0a3.9981f","name":"Manual Changes Needed Here","info":"Add or remove statements in this switch for new\nexperiments. The format for the switch statement\nshould be \"[Experiment ID]_[Device ID]\".","x":1418.75,"y":45,"wires":[]},{"id":"8128f1b1.f555e","type":"function","z":"3665fcdd.57c5f4","name":"File header","func":"header_msg = {\n    'filename': msg.filename,\n    'payload': 'timestamp\\tfilepath'\n}\n\n// Check if file exists (if it does do not send headers)\nvar fs = global.get('fs');\nvar send_headers = true;\ntry {\n    if (fs.existsSync(msg.filename)) {\n        //file exists\n        send_headers = false;\n    }\n} catch(err) {}\n\n\nif (send_headers) {\n    return header_msg;\n}","outputs":1,"noerr":0,"x":918.125,"y":542.5,"wires":[["2868df42.96087"]]},{"id":"2a2f8cbb.9d4f44","type":"batch","z":"3665fcdd.57c5f4","name":"","mode":"interval","count":10,"overlap":0,"interval":"5","allowEmptySequence":false,"topics":[],"x":1064.375015258789,"y":596.2500095367432,"wires":[["2868df42.96087"]]},{"id":"42b78c0b.d4ff64","type":"function","z":"e87fb0a3.9981f","name":"Resetting Experiment Run Numbers","func":"var exps = global.get('experiments');\nexps = {\n    'FSP':0,\n    'TEST':0,\n    'ESPIN':0\n};\nglobal.set('experiments', exps)\nreturn msg;","outputs":1,"noerr":0,"x":898.1250133514404,"y":660.0000104904175,"wires":[[]]},{"id":"75fbc5b1.f8783c","type":"delay","z":"ab3bf1e3.b303a","name":"","pauseType":"delay","timeout":"20","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1231.125015258789,"y":267.7500047683716,"wires":[["ea6edefe.edf94"]]},{"id":"8e2d6779.f00d78","type":"comment","z":"e87fb0a3.9981f","name":"Experimental","info":"","x":1634.833381652832,"y":102.99999809265137,"wires":[]},{"id":"4414779f.86e788","type":"function","z":"e87fb0a3.9981f","name":"Parsing vector data","func":"// Getting experiment configurations\nvar config = global.get(msg.experiment)\n\n// Get device config\nvar device = config.devices.filter(function(d) {\n    return d.device_id === msg.sensor;\n})[0];\n\n// Experiment number\nvar exp_num = config.experiment.experiment_run_id;\n\n// Get data headers from device config\nvar data_headers = device.headers;\nvar num_headers = data_headers.length;\n\n// Timestamp\nvar data_includes_timestamp = false;\nif (msg.timestamp === 'many') {\n    data_includes_time = true;\n}\nvar influx_create_timestamp = false;\nif (msg.timestamp === 'none') {\n    influx_create_timestamp = true;\n}\n\n// Are there tags for influxdb?\nif (device.influx_tags !== undefined) {\n    var user_tags = device.influx_tags;\n}\n// Get data length\nvar dat_length = msg.payload[data_headers[0]].length;\n\n// Creating InfluxDB data\nvar influx_data = []\nvar file_data = ''\nfor (i=0; i < dat_length; i++) {\n    let tags = {}\n    let fields = {}\n    data_headers.forEach(function(d, head_ind) {\n        let val = msg.payload[d][i];\n        file_data += val\n        if (head_ind !== (num_headers-1)) {\n            file_data += '\\t';\n        } else {\n            file_data += '\\n';\n        }\n        \n        if (String(val).match(/^-?[,.\\d]+(e[+-]\\d)?$/) !== null) {\n            val = parseFloat(val)\n        } else if (val === '') {\n            val = 0\n        }\n        // insert into onject\n        fields[d] = val;\n        if (user_tags.indexOf(d) >= 0) {\n            tags[d+'_tag'] = val;\n        }\n        // insert time if needed\n        if (influx_create_timestamp === false & data_includes_timestamp === false) {\n            fields['time'] = parseInt(msg.timestamp)\n        }\n    })\n    influx_data.push([fields, tags]);\n}\n\nvar influx_msg = {\n    'payload': influx_data,\n    'topic': msg.experiment + \"_\" + msg.sensor, // keep generic\n    'device_output_rate': parseInt(device.device_output_rate),\n    'type': 'DATA'\n};\n\n// Adding InfluxDB measurement value\nif (msg.influx_measurement !== undefined) {\n    influx_msg.measurement = msg.experiment + '_' + msg.influx_measurement;\n}\n\n// Output\nSAVE_LOCATION = global.get(\"saved_data_dir\")\nfilename = SAVE_LOCATION + \n    msg.experiment + \"/\" + \n    msg.experiment + \"_\" + exp_num + \"/\" +\n    msg.sensor;\n    \n\n// Check if file exists (if it does do not send headers)\nvar fs = global.get('fs');\nvar send_headers = true;\ntry {\n    if (fs.existsSync(filename)) {\n        //file exists\n        send_headers = false;\n    }\n} catch(err) {}\n\n// Return 3 things: \n//      Data for InfluxDB storage\n//      Data for file writing\n//      Data headers for file writing\nif (send_headers) {\n    console.log(\"SENDING HEADERS\")\n    return [\n        influx_msg,\n        {\n            'payload': data_headers,\n            'type': 'headers',\n            'topic': msg.experiment + \"_\" + exp_num + \"_\" + msg.sensor, \n            'filename': filename\n        },\n        {\n            'payload': file_data,\n            'type': 'vector_data',\n            'topic': msg.experiment + \"_\" + exp_num + \"_\" + msg.sensor, \n            'filename': filename\n        }\n    ];\n} else {\n    console.log(\"NOT SENDING HEADERS\")\n    console.log(filename)\n    \n    return [\n        influx_msg,\n        {\n            'payload': file_data,\n            'type': 'vector_data',\n            'topic': msg.experiment + \"_\" + exp_num + \"_\" + msg.sensor, \n            'filename': filename\n        }\n    ];\n}","outputs":3,"noerr":0,"x":1467.5000610351562,"y":216.66667556762695,"wires":[["d002709c.5bc06"],["1ae53a2c.12a4e6"],["1ae53a2c.12a4e6"]]},{"id":"f85ce618.c40888","type":"file","z":"70fe595b.4aa5c8","name":"Add data","filename":"","appendNewline":false,"createDir":true,"overwriteFile":"false","encoding":"none","x":1080.000015258789,"y":291.2500042915344,"wires":[[]]},{"id":"4a9d8c4c.6fc974","type":"batch","z":"70fe595b.4aa5c8","name":"","mode":"interval","count":10,"overlap":0,"interval":10,"allowEmptySequence":false,"topics":[],"x":751.2500076293945,"y":292.50000381469727,"wires":[["f85ce618.c40888"]]},{"id":"3343d8c1.fb7628","type":"function","z":"831f119b.483c2","name":"Create InfluxDB query","func":"var config = global.get(msg.experiment)\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    msg.query_payload = msg.payload.queries\n    msg.globus_token = msg.payload.globus_token\n} catch (err) {\n    console.log(\"Error JSON parsing funcx message payload\")\n    console.log(msg.payload)\n    return\n}\nmsg.payload = []\nmsg.query_payload.forEach(function(d) {\n    device_config = config.devices.filter(f => f.device_id === d.device)[0]\n    // Starting query string creation\n    query = \"SELECT \"\n    var_len = d.variables.length\n    // Add variables to query string\n    if (var_len === 0) {\n        d.variables = device_config.headers\n        query += \"* \"\n    } else {\n        for (var i in d.variables) {\n            query += d.variables[i]\n            if (i < var_len - 1) {\n                query += \", \"\n            } else {\n                query += \" \"\n            }\n        }\n    }\n    // Adding measurement\n    query += \"FROM \" + msg.experiment + \"_\" + d.device + \" \"\n    if (device_config.device_data_type === \"vector\") {\n        // Adding group by with tags\n        if (device_config.influx_tags !== undefined) {\n            d.variables.forEach(function(v) {\n                if (device_config.influx_tags.indexOf(v) >= 0) {\n                    query += \"GROUP BY \" + v + \"_tag\" + \" \"\n                }\n            })\n        }\n    }\n    // Adding order statement and the limit\n    query += \"ORDER BY time DESC LIMIT \" + d.last + \";\"\n    console.log(\"query\")\n    console.log(query)\n    msg.payload.push(query)\n});\n\nreturn msg;","outputs":1,"noerr":0,"x":213.8254222869873,"y":63.650821685791016,"wires":[["bee34d7d.0d328"]]},{"id":"ffe81ed0.6f979","type":"subflow:831f119b.483c2","z":"e87fb0a3.9981f","name":"","env":[],"x":862.8572082519531,"y":282.8571481704712,"wires":[]},{"id":"bee34d7d.0d328","type":"split","z":"831f119b.483c2","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":406.8412780761719,"y":62.76193141937256,"wires":[["73067c4a.ab26e4"]]},{"id":"73067c4a.ab26e4","type":"function","z":"831f119b.483c2","name":".payload to .query","func":"msg.query = msg.payload;\nreturn msg;","outputs":1,"noerr":0,"x":583.6666412353516,"y":65.55559539794922,"wires":[["f36794ce.b601c8"]]},{"id":"d7a12381.4b8cd","type":"function","z":"831f119b.483c2","name":"Create FuncX call","func":"msg.payload = JSON.stringify({\n    'data': msg.payload,\n    'globus_token': msg.globus_token\n});\nconsole.log(\"GOING TO FUNCX CALL\")\nvar debug_msg = {\n    \"topic\": \"MDML_DEBUG/\" + msg.experiment,\n    \"payload\": \"Data sent to FuncX function.\"\n}\n// return msg;\nreturn [\n    msg,\n    debug_msg\n];","outputs":2,"noerr":0,"x":729.666576385498,"y":207.77786445617676,"wires":[["77426c52.4c8094"],["93942d52.6df39"]]},{"id":"f36794ce.b601c8","type":"influxdb in","z":"831f119b.483c2","influxdb":"18be395a.563767","name":"","query":"","rawOutput":false,"precision":"","retentionPolicy":"","x":781.8889541625977,"y":70.00007438659668,"wires":[["c9d25f41.baa9f"]]},{"id":"c9d25f41.baa9f","type":"join","z":"831f119b.483c2","name":"","mode":"auto","build":"string","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"num","reduceFixup":"","x":557.8333854675293,"y":205.55558967590332,"wires":[["d7a12381.4b8cd"]]},{"id":"77426c52.4c8094","type":"funcx","z":"831f119b.483c2","function":"0f75b0f4-0100-44eb-a689-e0abdc14a0e5","endpoint":"a5c5f716-610e-40e1-9b9c-05c4b9a0a102","x":925.936466217041,"y":201.52381324768066,"wires":[["eda88f25.36c9e"]]},{"id":"1b49b24e.4fed0e","type":"funcx-status","z":"831f119b.483c2","name":"","x":1615.3808212280273,"y":211.22223663330078,"wires":[[]]},{"id":"93942d52.6df39","type":"mqtt out","z":"831f119b.483c2","name":"Publish events","topic":"","qos":"","retain":"","broker":"8f932cd7.3efac","x":998.6904678344727,"y":258.571439743042,"wires":[]},{"id":"eda88f25.36c9e","type":"function","z":"831f119b.483c2","name":"","func":"console.log(\"INBETWEEN FUNCX\")\nconsole.log(msg)\nconsole.log(\"INBETWEEN FUNCX\")\nreturn msg;","outputs":1,"noerr":0,"x":1152.1427841186523,"y":207.14284706115723,"wires":[["be8eb516.b10848"]]},{"id":"be8eb516.b10848","type":"delay","z":"831f119b.483c2","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1345.0000839233398,"y":211.42856454849243,"wires":[["1b49b24e.4fed0e"]]},{"id":"6ceaee66.481d3","type":"function","z":"831f119b.483c2","name":"Saving analysis call to file","func":"var config = global.get(msg.experiment);\nvar exp_run_id = config.experiment.experiment_run_id;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n} catch (err) {\n    console.log(\"Error JSON parsing funcx message payload\")\n    console.log(msg.payload)\n    return\n}\nconsole.log(\"PRINT RAW FUNCX MESSAGE\")\nconsole.log(msg)\nconsole.log(\"PRINT RAW FUNCX MESSAGE\")\n\n// Get file save location\nSAVE_LOCATION = global.get(\"saved_data_dir\")\nfilename = SAVE_LOCATION + \n    msg.experiment + \"/\" + \n    msg.experiment + \"_\" + \n    exp_run_id + \"/\" +\n    \"FUNCX_CALLS\";\n\n// \n\nvar new_msg = {\n    \"filename\": filename,\n    \"topic\": msg.experiment + \"_\" + exp_run_id,\n    \"payload\": msg.payload.timestamp + \"\\t\" + JSON.stringify(msg.payload.queries)\n};\nreturn new_msg;","outputs":1,"noerr":0,"x":267.85711669921875,"y":364.2857036590576,"wires":[["9136f6b0.973198"]]},{"id":"9136f6b0.973198","type":"file","z":"831f119b.483c2","name":"Add data","filename":"","appendNewline":true,"createDir":true,"overwriteFile":"false","encoding":"none","x":562.8571243286133,"y":364.28571224212646,"wires":[[]]},{"id":"b3df3beb.e53908","type":"http in","z":"3665fcdd.57c5f4","name":"[get] /TEST_PLIF","url":"/TEST_PLIF","method":"get","upload":false,"swaggerDoc":"","x":1361.5713806152344,"y":187.8571319580078,"wires":[["3b1f307b.953f4"]]},{"id":"3b1f307b.953f4","type":"multipart-encoder","z":"3665fcdd.57c5f4","name":"","statusCode":"","ignoreMessages":true,"outputOneNew":false,"outputIfSingle":false,"outputIfAll":false,"globalHeaders":{"Content-Type":"multipart/x-mixed-replace;boundary=--myboundary","Connection":"keep-alive","Expires":"Fri, 01 Jan 1990 00:00:00 GMT","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache"},"partHeaders":{"Content-Type":"image/jpeg"},"destination":"all","highWaterMark":16384,"x":1520.5714111328125,"y":187.71426391601562,"wires":[[]]},{"id":"740e0d44.0b6904","type":"http in","z":"3665fcdd.57c5f4","name":"[get] /TEST_IMAGE","url":"/TEST_IMAGE","method":"get","upload":false,"swaggerDoc":"","x":1365,"y":411,"wires":[["25d33612.55174a"]]},{"id":"25d33612.55174a","type":"multipart-encoder","z":"3665fcdd.57c5f4","name":"","statusCode":"","ignoreMessages":true,"outputOneNew":false,"outputIfSingle":false,"outputIfAll":false,"globalHeaders":{"Content-Type":"multipart/x-mixed-replace;boundary=--myboundary","Connection":"keep-alive","Expires":"Fri, 01 Jan 1990 00:00:00 GMT","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache"},"partHeaders":{"Content-Type":"image/jpeg"},"destination":"all","highWaterMark":16384,"x":1561,"y":410.8571319580078,"wires":[[]]},{"id":"f9e7026f.a4d1d","type":"delay","z":"ab3bf1e3.b303a","name":"","pauseType":"delay","timeout":"10","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":789,"y":243,"wires":[["b6d05595.99dca8","912757c.a5f05a8"]]}]